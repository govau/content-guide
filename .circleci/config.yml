# Node CircleCI 2.0 configuration file to DTA cloud 2.0

version: 2
jobs:

  # DEPLOY-STAGING JOB
  # installing dependencies, building assets and deploying to staging
  deploy-staging:
    docker:
      - image: circleci/ruby:2.5.5

    steps:
      - checkout                       # get the files from the repo (why would you ever not want the files????)
      - run: git submodule init             # pulling submodule
      - run: git submodule update
      - run: sudo bundle install --path=vendor/bundle --jobs=4 --retry=3
      - run: sudo bundle exec jekyll build --destination tmp/_site_link_checker/baseurl --baseurl /baseurl
      # Run a html proofer over the site to check all internal links
      - run: sudo bundle exec htmlproofer tmp/_site_link_checker --disable-external --allow-hash-href --url-ignore "/(mailto:.*)/" --empty-alt-ignore
      - run: sudo JEKYLL_ENV=production bundle exec jekyll build --destination ./_site/
      - run: sudo bundle exec jekyll hyde
      - run: mv _site/robots-production.txt _site/robots.txt
      # install packages: cf-cli and tree
      - run: sudo apt-get install apt-transport-https
      - run: wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      - run: echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      - run: sudo apt-get update
      - run: sudo apt-get install tree
      - run: sudo apt-get install cf-cli
      - run: cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
      - run: cf version                # log what version we are running
      - run: cf login -a api.system.y.cld.gov.au -o $CF_ORG_STAGING -s $CF_SPACE_STAGING -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
      - run: tree -C                   # log all files before we push
      - run: cf zero-downtime-push content-guide -f manifest-staging.yml


  # DEPLOY-PROD JOB
  # installing dependencies, building assets and deploying to production
  deploy-prod:
    docker:
      - image: circleci/ruby:2.5.5

    steps:
      - checkout                       # get the files from the repo (why would you ever not want the files????)
      - run: git submodule init             # pulling submodule
      - run: git submodule update
      - run: sudo bundle install --path=vendor/bundle --jobs=4 --retry=3
      - run: sudo bundle exec jekyll build --destination tmp/_site_link_checker/baseurl --baseurl /baseurl
      # Run a html proofer over the site to check all internal links
      - run: sudo bundle exec htmlproofer tmp/_site_link_checker --disable-external --allow-hash-href --url-ignore "/(mailto:.*)/" --empty-alt-ignore
      - run: sudo JEKYLL_ENV=production bundle exec jekyll build --destination ./_site/content-guide --baseurl /content-guide
      - run: sudo bundle exec jekyll hyde
      - run: mv _site/content-guide/robots-production.txt _site/content-guide/robots.txt
      # install packages: cf-cli and tree
      - run: sudo apt-get install apt-transport-https
      - run: wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      - run: echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      - run: sudo apt-get update
      - run: sudo apt-get install tree
      - run: sudo apt-get install cf-cli
      - run: cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
      - run: cf version
      - run: cf login -a api.system.b.cld.gov.au -o $CF_ORG_PROD -s $CF_SPACE_PROD -u $CF_USER_PROD -p $CF_PASSWORD_PROD
      - run: tree -C
      - run: cf zero-downtime-push content-guide -f manifest-production.yml


  # DEPLOY-TEST JOB
  # installing dependencies, building assets and deploying to test branches
  deploy-test:
    docker:
      - image: circleci/ruby:2.5.5

    steps:
      - checkout                       # get the files from the repo (why would you ever not want the files????)
      - run: git submodule init             # pulling submodule
      - run: git submodule update
      - run: sudo bundle install --path=vendor/bundle --jobs=4 --retry=3
      - run: sudo bundle exec jekyll build --destination tmp/_site_link_checker/baseurl --baseurl /baseurl
      # Run a html proofer over the site to check all internal links
      - run: sudo bundle exec htmlproofer tmp/_site_link_checker --disable-external --allow-hash-href --url-ignore "/(mailto:.*)/" --empty-alt-ignore
      - run: sudo JEKYLL_ENV=production bundle exec jekyll build --destination ./_site/
      - run: sudo bundle exec jekyll hyde
      - run: mv _site/robots-production.txt _site/robots.txt
      # install packages: cf-cli and tree
      - run: sudo apt-get install apt-transport-https
      - run: wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      - run: echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      - run: sudo apt-get update
      - run: sudo apt-get install tree
      - run: sudo apt-get install cf-cli
      - run: cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
      - run: cf version
      - run: cf login -a api.system.y.cld.gov.au -o $CF_ORG_STAGING -s $CF_SPACE_STAGING -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
      - run: tree -C
      - run: cf zero-downtime-push content-guide-$CIRCLE_BRANCH -f manifest-testing.yml


# OUR WORKFLOW
# this is where we orchestrate our jobs
workflows:
  version: 2
  deploying:
    jobs:
      - deploy-staging:          # run deploy staging
          filters:
            branches:
              only: develop      # and only on the `develop` branch

      - deploy-prod:             # run deploy production
          filters:
            branches:
              only: master       # and only on the `master` branch

      - deploy-test:             # run deploy production
          filters:
            branches:
              only: /test-.*/    # and only on the branches that start with `test-`
